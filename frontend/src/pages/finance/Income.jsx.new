import React, { useState, useEffect } from "react";
import axios from "axios";
import "./Income.css";

const PAYMENT_METHODS = ["Cash", "Bank Transfer", "Online Payment", "Other"];

// Category mapping for product types
const CATEGORY_MAP = {
  'jackfruit': 'Jackfruit Products',
  'woodapple': 'Wood Apple Products',
  'durian': 'Durian Products',
  'banana': 'Banana Products',
  'other': 'Other'
};

const CATEGORIES = Object.values(CATEGORY_MAP);

const Income = () => {
  const [productConfigs, setProductConfigs] = useState([]);
  const [selectedConfig, setSelectedConfig] = useState(null);
  const [incomes, setIncomes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [formData, setFormData] = useState({
    description: "",
    category: "",
    productType: "",
    variant: "",
    quantity: "",
    unitPrice: "",
    paymentMethod: "Cash",
    referenceNumber: "",
    notes: "",
    incomeDate: new Date().toISOString().split("T")[0],
  });

  // Fetch product configurations
  useEffect(() => {
    const fetchProductConfigs = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/products/config');
        setProductConfigs(response.data);
      } catch (error) {
        console.error('Error fetching product configs:', error);
        setError('Failed to load product configurations. Please refresh the page.');
      }
    };
    fetchProductConfigs();
  }, []);

  // Get variants for selected product type
  const getVariants = (productType) => {
    const config = productConfigs.find(c => c.productType === productType);
    return config ? config.variants : [];
  };

  // Function to generate order reference number
  const generateOrderRef = () => {
    const date = new Date();
    const year = date.getFullYear().toString().slice(-2);
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
    return `ORD-${year}${month}${day}-${random}`;
  };

  // Handle product type change
  const handleProductTypeChange = (type) => {
    const config = productConfigs.find(c => c.productType === type);
    setSelectedConfig(config);
    setFormData(prev => ({
      ...prev,
      productType: type,
      category: CATEGORY_MAP[type] || 'Other',
      variant: '',
      unitPrice: ''
    }));
  };

  // Handle variant change
  const handleVariantChange = (variantName) => {
    if (selectedConfig) {
      const variant = selectedConfig.variants.find(v => v.name === variantName);
      if (variant) {
        setFormData(prev => ({
          ...prev,
          variant: variantName,
          unitPrice: variant.unitPrice
        }));
      }
    }
  };

  // Fetch all incomes
  const fetchIncomes = async () => {
    setLoading(true);
    try {
      const res = await axios.get("http://localhost:5000/api/incomes");
      setIncomes(res.data);
    } catch (err) {
      setError("Failed to fetch income records. Please try again.");
      console.error("Error fetching incomes:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchIncomes();
  }, []);

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    try {
      const dataToSubmit = {
        ...formData,
        referenceNumber: formData.referenceNumber || generateOrderRef()
      };

      await axios.post("http://localhost:5000/api/incomes", dataToSubmit);
      
      setFormData({
        description: "",
        category: "",
        productType: "",
        variant: "",
        quantity: "",
        unitPrice: "",
        paymentMethod: "Cash",
        referenceNumber: "",
        notes: "",
        incomeDate: new Date().toISOString().split("T")[0],
      });

      fetchIncomes();
    } catch (err) {
      setError(err.response?.data?.error || "Error saving income record. Please try again.");
      console.error("Error saving income:", err);
    } finally {
      setLoading(false);
    }
  };

  // Validate form
  const validateForm = () => {
    if (!formData.description.trim()) {
      setError("Description is required");
      return false;
    }
    if (!formData.productType) {
      setError("Product type is required");
      return false;
    }
    if (!formData.variant) {
      setError("Product variant is required");
      return false;
    }
    if (!formData.quantity || formData.quantity <= 0) {
      setError("Quantity must be greater than 0");
      return false;
    }
    if (!formData.unitPrice || formData.unitPrice <= 0) {
      setError("Unit price must be greater than 0");
      return false;
    }
    return true;
  };

  // Filter incomes
  const filteredIncomes = incomes.filter((inc) => {
    const matchesCategory =
      selectedCategory === "All" || inc.category === selectedCategory;
    const matchesSearch = inc.description
      .toLowerCase()
      .includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  return (
    <div className="income-container">
      <h2>üìà Income Management</h2>

      {error && <div className="error-message">{error}</div>}

      {/* Simulate Order Button */}
      <div className="simulate-order">
        <button
          type="button"
          onClick={() => {
            if (productConfigs.length > 0) {
              const randomConfig = productConfigs[Math.floor(Math.random() * productConfigs.length)];
              const randomVariant = randomConfig.variants[Math.floor(Math.random() * randomConfig.variants.length)];
              const randomQuantity = Math.floor(Math.random() * 10) + 1;
              
              setFormData({
                description: `Order - ${randomVariant.name} ${randomConfig.productType} (${randomVariant.unit})`,
                category: CATEGORY_MAP[randomConfig.productType],
                productType: randomConfig.productType,
                variant: randomVariant.name,
                quantity: randomQuantity,
                unitPrice: randomVariant.unitPrice,
                paymentMethod: "Online Payment",
                referenceNumber: generateOrderRef(),
                notes: `Simulated order - ${randomVariant.unit}`,
                incomeDate: new Date().toISOString().split("T")[0],
              });
            }
          }}
          className="simulate-btn"
          disabled={loading || productConfigs.length === 0}
        >
          üõçÔ∏è Simulate Customer Order
        </button>
      </div>

      {/* Add Income Form */}
      <form className="income-form" onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Description"
          value={formData.description}
          onChange={(e) =>
            setFormData({ ...formData, description: e.target.value })
          }
          disabled={loading}
          required
        />

        <select
          value={formData.productType}
          onChange={(e) => handleProductTypeChange(e.target.value)}
          disabled={loading}
          required
        >
          <option value="">Select Product Type</option>
          {productConfigs.map((config) => (
            <option key={config.productType} value={config.productType}>
              {CATEGORY_MAP[config.productType]}
            </option>
          ))}
        </select>

        <select
          value={formData.variant}
          onChange={(e) => handleVariantChange(e.target.value)}
          disabled={loading || !formData.productType}
          required
        >
          <option value="">Select Variant</option>
          {selectedConfig?.variants.map((variant) => (
            <option key={variant.name} value={variant.name}>
              {variant.name} ({variant.unit})
            </option>
          ))}
        </select>

        <input
          type="number"
          placeholder="Quantity"
          value={formData.quantity}
          onChange={(e) =>
            setFormData({ ...formData, quantity: Number(e.target.value) })
          }
          min="0"
          step="1"
          disabled={loading}
          required
        />

        <input
          type="number"
          placeholder="Unit Price (Rs)"
          value={formData.unitPrice}
          onChange={(e) =>
            setFormData({ ...formData, unitPrice: Number(e.target.value) })
          }
          min="0"
          step="0.01"
          disabled={loading}
          required
        />

        <select
          value={formData.paymentMethod}
          onChange={(e) =>
            setFormData({ ...formData, paymentMethod: e.target.value })
          }
          disabled={loading}
        >
          {PAYMENT_METHODS.map((method) => (
            <option key={method} value={method}>
              {method}
            </option>
          ))}
        </select>

        <input
          type="text"
          placeholder="Reference Number (Optional)"
          value={formData.referenceNumber}
          onChange={(e) =>
            setFormData({ ...formData, referenceNumber: e.target.value })
          }
          disabled={loading}
        />

        <input
          type="date"
          value={formData.incomeDate}
          onChange={(e) =>
            setFormData({ ...formData, incomeDate: e.target.value })
          }
          disabled={loading}
          required
        />

        <textarea
          placeholder="Notes (Optional)"
          value={formData.notes}
          onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
          disabled={loading}
          rows="2"
        />

        <button type="submit" disabled={loading}>
          {loading ? "Saving..." : "Add Income"}
        </button>
      </form>

      {/* Filters */}
      <div className="filters">
        <input
          type="text"
          className="search-input"
          placeholder="Search by description..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />

        <select
          className="category-filter"
          value={selectedCategory}
          onChange={(e) => setSelectedCategory(e.target.value)}
        >
          <option value="All">All Categories</option>
          {CATEGORIES.map((cat) => (
            <option key={cat} value={cat}>
              {cat}
            </option>
          ))}
        </select>
      </div>

      {loading ? (
        <div className="loading-spinner">Loading income records...</div>
      ) : incomes.length === 0 ? (
        <div className="empty-state">
          No income records found. Add your first record using the form above.
        </div>
      ) : (
        <>
          {/* Income Table */}
          <table className="income-table">
            <thead>
              <tr>
                <th>Description</th>
                <th>Category</th>
                <th>Product</th>
                <th>Variant</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Total (Rs)</th>
                <th>Date</th>
              </tr>
            </thead>
            <tbody>
              {filteredIncomes.map((inc) => (
                <tr key={inc._id}>
                  <td>{inc.description || 'N/A'}</td>
                  <td>{inc.category || 'N/A'}</td>
                  <td>{inc.productType || 'N/A'}</td>
                  <td>{inc.variant || 'N/A'}</td>
                  <td>{inc.quantity || 0}</td>
                  <td>Rs. {inc.unitPrice ? inc.unitPrice.toFixed(2) : '0.00'}</td>
                  <td>Rs. {inc.quantity && inc.unitPrice ? (inc.quantity * inc.unitPrice).toFixed(2) : '0.00'}</td>
                  <td>{inc.incomeDate ? new Date(inc.incomeDate).toLocaleDateString() : 'N/A'}</td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Income Summary Card */}
          <div className="income-summary" style={{ 
            margin: '20px 0', 
            padding: '20px', 
            backgroundColor: '#f8f9fa', 
            borderRadius: '8px',
            boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
          }}>
            <h3 style={{ margin: '0 0 15px 0', color: '#2c3e50' }}>Income Summary</h3>
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between',
              alignItems: 'center',
              padding: '10px 20px',
              backgroundColor: '#ffffff',
              borderRadius: '5px'
            }}>
              <span style={{ fontSize: '1.2em', fontWeight: 'bold' }}>Total Income:</span>
              <span style={{ 
                fontSize: '1.4em', 
                color: '#28a745', 
                fontWeight: 'bold'
              }}>
                Rs. {filteredIncomes.reduce((sum, inc) => 
                  sum + ((inc.quantity || 0) * (inc.unitPrice || 0)), 0
                ).toLocaleString()}
              </span>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default Income;